# Builds and publishes a container image to the Azure container registry,
# then deploys it as a Container App revision.

name: Deploy Update

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # -----------------------------------------------------------------------
  # Validate changes
  # -----------------------------------------------------------------------
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Private repo access
        env:
          # use env vars to write unmasked secrets to .netrc file
          BUF_USER: ${{ secrets.BUF_USER }}
          BUF_TOKEN: ${{ secrets.BUF_PAT }}
          REPO_USER: ${{ secrets.REPO_USER }}
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          echo "
            machine github.com login $REPO_USER password $REPO_TOKEN
            machine buf.build login $BUF_USER password $BUF_PAT
          " >> ~/.netrc
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      - name: Unit tests
        run: |
          go env -w GOPRIVATE="github.com/${{ github.repository_owner }}/*"
          go mod download
          go test -tags jwx_es256k -v ./...
  # -----------------------------------------------------------------------
  # Deploy Container App
  # -----------------------------------------------------------------------
  deploy:
    if: |
      !contains(github.event.head_commit.message, '[skip]')
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      # TODO: move to org variable
      RESOURCE_GROUP: rg-platform
      ACR_NAME: acrendochecker

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Increment version
        uses: reecetech/version-increment@2023.3.1
        id: semver
        with:
          scheme: semver
          increment: patch

      - name: Version-dependent values
        id: version
        uses: actions/github-script@v6
        with:
          script: |
            const version = "${{ steps.semver.outputs.v-version }}"
            return {
              tagName: version,
              imageName: `${{ env.ACR_NAME }}.azurecr.io/${{ github.event.repository.name }}:${version}`,
              revisionSuffix: version.replace(/\./g, '-')
            }
      - name: Kustomize patches
        run: |
          cd ./.github/kustomize
          kustomize edit add patch --kind containerapp --patch '[
            {"op": "replace", "path": "/properties/configuration/secrets/0/value", "value": "${{ secrets.ACR_PASSWORD }}"},
            {"op": "replace", "path": "/properties/template/containers/0/image", "value": "${{ fromJSON(steps.version.outputs.result).imageName }}"},
            {"op": "replace", "path": "/properties/template/revisionSuffix", "value": "${{ fromJSON(steps.version.outputs.result).revisionSuffix }}"}
          ]'
      - name: Kustomize
        run: |
          kustomize build ./.github/kustomize | yq 'del(.metadata)' - > .github/kustomize/kustomized.yaml
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Docker private repo access
        env:
          BUF_USER: ${{ secrets.BUF_USER }}
          BUF_TOKEN: ${{ secrets.BUF_PAT }}
          REPO_USER: ${{ secrets.REPO_USER }}
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          echo "
            machine github.com login $REPO_USER password $REPO_TOKEN
            machine buf.build login $BUF_USER password $BUF_PAT
          " >> .netrc
      - name: Deploy
        uses: azure/container-apps-deploy-action@v0
        with:
          containerAppName: ca-${{ github.event.repository.name }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          appSourcePath: ${{ github.workspace }}
          acrName: ${{ env.ACR_NAME }}
          imageToBuild: ${{ fromJSON(steps.version.outputs.result).imageName }}
          imageToDeploy: ${{ fromJSON(steps.version.outputs.result).imageName }}
          yamlConfigPath: .github/kustomize/kustomized.yaml

      # -----------------------------------------------------------------------
      # Manage revisions
      # -----------------------------------------------------------------------
      - name: Set 'staging' label
        run: |
          az containerapp revision label add \
            --label staging \
            --revision ca-${{ github.event.repository.name }}--${{ fromJSON(steps.version.outputs.result).revisionSuffix }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --no-prompt
      # Deactivate all revisions with zero traffic (except the one we just
      # deployed == last in list)
      - name: Deactivate unused revisions
        run: |
          revisions=$(az containerapp revision list \
            --name ca-${{ github.event.repository.name }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query '[:-1] | @[?properties.trafficWeight == `0`].name')
          for revName in  $(echo $revisions | jq -r '.[]'); do
            az containerapp revision deactivate \
              --revision $revName \
              --name ca-${{ github.event.repository.name }} \
              --resource-group ${{ env.RESOURCE_GROUP }}
          done