// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: patient/v1/patient.proto

package patientv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/endo-checker/patient/internal/gen/patient/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PatientServiceName is the fully-qualified name of the PatientService service.
	PatientServiceName = "patient.v1.PatientService"
)

// PatientServiceClient is a client for the patient.v1.PatientService service.
type PatientServiceClient interface {
	// adding patients.
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	// quering patients.
	Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error)
	// retrieving patient.
	Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error)
	// UpdateRequest is used to specify a patient to update.
	Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error)
	// Delete removes patients
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
}

// NewPatientServiceClient constructs a client for the patient.v1.PatientService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPatientServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PatientServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &patientServiceClient{
		create: connect_go.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+"/patient.v1.PatientService/Create",
			opts...,
		),
		query: connect_go.NewClient[v1.QueryRequest, v1.QueryResponse](
			httpClient,
			baseURL+"/patient.v1.PatientService/Query",
			opts...,
		),
		get: connect_go.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+"/patient.v1.PatientService/Get",
			opts...,
		),
		update: connect_go.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+"/patient.v1.PatientService/Update",
			opts...,
		),
		delete: connect_go.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+"/patient.v1.PatientService/Delete",
			opts...,
		),
	}
}

// patientServiceClient implements PatientServiceClient.
type patientServiceClient struct {
	create *connect_go.Client[v1.CreateRequest, v1.CreateResponse]
	query  *connect_go.Client[v1.QueryRequest, v1.QueryResponse]
	get    *connect_go.Client[v1.GetRequest, v1.GetResponse]
	update *connect_go.Client[v1.UpdateRequest, v1.UpdateResponse]
	delete *connect_go.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// Create calls patient.v1.PatientService.Create.
func (c *patientServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Query calls patient.v1.PatientService.Query.
func (c *patientServiceClient) Query(ctx context.Context, req *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// Get calls patient.v1.PatientService.Get.
func (c *patientServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Update calls patient.v1.PatientService.Update.
func (c *patientServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls patient.v1.PatientService.Delete.
func (c *patientServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// PatientServiceHandler is an implementation of the patient.v1.PatientService service.
type PatientServiceHandler interface {
	// adding patients.
	Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error)
	// quering patients.
	Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error)
	// retrieving patient.
	Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error)
	// UpdateRequest is used to specify a patient to update.
	Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error)
	// Delete removes patients
	Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error)
}

// NewPatientServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPatientServiceHandler(svc PatientServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/patient.v1.PatientService/Create", connect_go.NewUnaryHandler(
		"/patient.v1.PatientService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/patient.v1.PatientService/Query", connect_go.NewUnaryHandler(
		"/patient.v1.PatientService/Query",
		svc.Query,
		opts...,
	))
	mux.Handle("/patient.v1.PatientService/Get", connect_go.NewUnaryHandler(
		"/patient.v1.PatientService/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/patient.v1.PatientService/Update", connect_go.NewUnaryHandler(
		"/patient.v1.PatientService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/patient.v1.PatientService/Delete", connect_go.NewUnaryHandler(
		"/patient.v1.PatientService/Delete",
		svc.Delete,
		opts...,
	))
	return "/patient.v1.PatientService/", mux
}

// UnimplementedPatientServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPatientServiceHandler struct{}

func (UnimplementedPatientServiceHandler) Create(context.Context, *connect_go.Request[v1.CreateRequest]) (*connect_go.Response[v1.CreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("patient.v1.PatientService.Create is not implemented"))
}

func (UnimplementedPatientServiceHandler) Query(context.Context, *connect_go.Request[v1.QueryRequest]) (*connect_go.Response[v1.QueryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("patient.v1.PatientService.Query is not implemented"))
}

func (UnimplementedPatientServiceHandler) Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("patient.v1.PatientService.Get is not implemented"))
}

func (UnimplementedPatientServiceHandler) Update(context.Context, *connect_go.Request[v1.UpdateRequest]) (*connect_go.Response[v1.UpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("patient.v1.PatientService.Update is not implemented"))
}

func (UnimplementedPatientServiceHandler) Delete(context.Context, *connect_go.Request[v1.DeleteRequest]) (*connect_go.Response[v1.DeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("patient.v1.PatientService.Delete is not implemented"))
}
