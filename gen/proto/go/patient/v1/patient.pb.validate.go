// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: patient/v1/patient.proto

package patientv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _patient_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRequestMultiError, or
// nil if none found.
func (m *CreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPatient() == nil {
		err := CreateRequestValidationError{
			field:  "Patient",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPatient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "Patient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "Patient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPatient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestValidationError{
				field:  "Patient",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRequestMultiError(errors)
	}

	return nil
}

// CreateRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestMultiError) AllErrors() []error { return m }

// CreateRequestValidationError is the validation error returned by
// CreateRequest.Validate if the designated constraints aren't met.
type CreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestValidationError) ErrorName() string { return "CreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestValidationError{}

// Validate checks the field values on CreateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateResponseMultiError,
// or nil if none found.
func (m *CreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPatient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateResponseValidationError{
					field:  "Patient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateResponseValidationError{
					field:  "Patient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPatient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateResponseValidationError{
				field:  "Patient",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateResponseMultiError(errors)
	}

	return nil
}

// CreateResponseMultiError is an error wrapping multiple validation errors
// returned by CreateResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResponseMultiError) AllErrors() []error { return m }

// CreateResponseValidationError is the validation error returned by
// CreateResponse.Validate if the designated constraints aren't met.
type CreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResponseValidationError) ErrorName() string { return "CreateResponseValidationError" }

// Error satisfies the builtin error interface
func (e CreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResponseValidationError{}

// Validate checks the field values on QueryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryRequestMultiError, or
// nil if none found.
func (m *QueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOffset() < 0 {
		err := QueryRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() < 0 {
		err := QueryRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SearchText

	// no validation rules for GivenNames

	// no validation rules for FamilyName

	// no validation rules for SpecialistId

	if len(errors) > 0 {
		return QueryRequestMultiError(errors)
	}

	return nil
}

// QueryRequestMultiError is an error wrapping multiple validation errors
// returned by QueryRequest.ValidateAll() if the designated constraints aren't met.
type QueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRequestMultiError) AllErrors() []error { return m }

// QueryRequestValidationError is the validation error returned by
// QueryRequest.Validate if the designated constraints aren't met.
type QueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRequestValidationError) ErrorName() string { return "QueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRequestValidationError{}

// Validate checks the field values on QueryResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryResponseMultiError, or
// nil if none found.
func (m *QueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCursor() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryResponseValidationError{
						field:  fmt.Sprintf("Cursor[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryResponseValidationError{
						field:  fmt.Sprintf("Cursor[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryResponseValidationError{
					field:  fmt.Sprintf("Cursor[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Matches

	if len(errors) > 0 {
		return QueryResponseMultiError(errors)
	}

	return nil
}

// QueryResponseMultiError is an error wrapping multiple validation errors
// returned by QueryResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryResponseMultiError) AllErrors() []error { return m }

// QueryResponseValidationError is the validation error returned by
// QueryResponse.Validate if the designated constraints aren't met.
type QueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryResponseValidationError) ErrorName() string { return "QueryResponseValidationError" }

// Error satisfies the builtin error interface
func (e QueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryResponseValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

func (m *GetRequest) _validateUuid(uuid string) error {
	if matched := _patient_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetResponseMultiError, or
// nil if none found.
func (m *GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPatient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Patient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Patient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPatient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponseValidationError{
				field:  "Patient",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResponseMultiError(errors)
	}

	return nil
}

// GetResponseMultiError is an error wrapping multiple validation errors
// returned by GetResponse.ValidateAll() if the designated constraints aren't met.
type GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponseMultiError) AllErrors() []error { return m }

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPatient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "Patient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "Patient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPatient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRequestValidationError{
				field:  "Patient",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

// Validate checks the field values on UpdateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResponseMultiError,
// or nil if none found.
func (m *UpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPatient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateResponseValidationError{
					field:  "Patient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateResponseValidationError{
					field:  "Patient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPatient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResponseValidationError{
				field:  "Patient",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateResponseMultiError(errors)
	}

	return nil
}

// UpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResponseMultiError) AllErrors() []error { return m }

// UpdateResponseValidationError is the validation error returned by
// UpdateResponse.Validate if the designated constraints aren't met.
type UpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResponseValidationError) ErrorName() string { return "UpdateResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteRequest) _validateUuid(uuid string) error {
	if matched := _patient_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on Patient with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Patient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Patient with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PatientMultiError, or nil if none found.
func (m *Patient) ValidateAll() error {
	return m.validate(true)
}

func (m *Patient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = PatientValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetGivenNames()); l < 2 || l > 50 {
		err := PatientValidationError{
			field:  "GivenNames",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFamilyName()); l < 2 || l > 50 {
		err := PatientValidationError{
			field:  "FamilyName",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDateOfBirth() != "" {

		if !_Patient_DateOfBirth_Pattern.MatchString(m.GetDateOfBirth()) {
			err := PatientValidationError{
				field:  "DateOfBirth",
				reason: "value does not match regex pattern \"^\\\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for NhiNumber

	// no validation rules for Email

	if m.GetInitialAppointmentDate() != "" {

		if !_Patient_InitialAppointmentDate_Pattern.MatchString(m.GetInitialAppointmentDate()) {
			err := PatientValidationError{
				field:  "InitialAppointmentDate",
				reason: "value does not match regex pattern \"^\\\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatientValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatientValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatientValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMedicalDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatientValidationError{
					field:  "MedicalDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatientValidationError{
					field:  "MedicalDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedicalDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatientValidationError{
				field:  "MedicalDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SpecialistId

	if len(errors) > 0 {
		return PatientMultiError(errors)
	}

	return nil
}

func (m *Patient) _validateUuid(uuid string) error {
	if matched := _patient_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PatientMultiError is an error wrapping multiple validation errors returned
// by Patient.ValidateAll() if the designated constraints aren't met.
type PatientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatientMultiError) AllErrors() []error { return m }

// PatientValidationError is the validation error returned by Patient.Validate
// if the designated constraints aren't met.
type PatientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatientValidationError) ErrorName() string { return "PatientValidationError" }

// Error satisfies the builtin error interface
func (e PatientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatientValidationError{}

var _Patient_DateOfBirth_Pattern = regexp.MustCompile("^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$")

var _Patient_InitialAppointmentDate_Pattern = regexp.MustCompile("^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$")

// Validate checks the field values on MedicalDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MedicalDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedicalDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MedicalDetailsMultiError,
// or nil if none found.
func (m *MedicalDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *MedicalDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPainTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MedicalDetailsValidationError{
					field:  "PainTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MedicalDetailsValidationError{
					field:  "PainTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPainTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MedicalDetailsValidationError{
				field:  "PainTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sickness

	if all {
		switch v := interface{}(m.GetSicknessDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MedicalDetailsValidationError{
					field:  "SicknessDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MedicalDetailsValidationError{
					field:  "SicknessDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSicknessDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MedicalDetailsValidationError{
				field:  "SicknessDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEmotionalState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MedicalDetailsValidationError{
					field:  "EmotionalState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MedicalDetailsValidationError{
					field:  "EmotionalState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmotionalState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MedicalDetailsValidationError{
				field:  "EmotionalState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BodyAches

	// no validation rules for Energy

	// no validation rules for SkinChanges

	if all {
		switch v := interface{}(m.GetAppetite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MedicalDetailsValidationError{
					field:  "Appetite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MedicalDetailsValidationError{
					field:  "Appetite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppetite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MedicalDetailsValidationError{
				field:  "Appetite",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FocusLevels

	// no validation rules for Surgeries

	// no validation rules for IconColor

	if len(errors) > 0 {
		return MedicalDetailsMultiError(errors)
	}

	return nil
}

// MedicalDetailsMultiError is an error wrapping multiple validation errors
// returned by MedicalDetails.ValidateAll() if the designated constraints
// aren't met.
type MedicalDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedicalDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedicalDetailsMultiError) AllErrors() []error { return m }

// MedicalDetailsValidationError is the validation error returned by
// MedicalDetails.Validate if the designated constraints aren't met.
type MedicalDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedicalDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedicalDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedicalDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedicalDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedicalDetailsValidationError) ErrorName() string { return "MedicalDetailsValidationError" }

// Error satisfies the builtin error interface
func (e MedicalDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedicalDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedicalDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedicalDetailsValidationError{}

// Validate checks the field values on PainTypes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PainTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PainTypes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PainTypesMultiError, or nil
// if none found.
func (m *PainTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *PainTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCramping()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PainTypesValidationError{
					field:  "Cramping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PainTypesValidationError{
					field:  "Cramping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCramping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PainTypesValidationError{
				field:  "Cramping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetThrobbing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PainTypesValidationError{
					field:  "Throbbing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PainTypesValidationError{
					field:  "Throbbing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThrobbing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PainTypesValidationError{
				field:  "Throbbing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTightning()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PainTypesValidationError{
					field:  "Tightning",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PainTypesValidationError{
					field:  "Tightning",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTightning()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PainTypesValidationError{
				field:  "Tightning",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStabbing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PainTypesValidationError{
					field:  "Stabbing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PainTypesValidationError{
					field:  "Stabbing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStabbing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PainTypesValidationError{
				field:  "Stabbing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AdditionalNotes

	if len(errors) > 0 {
		return PainTypesMultiError(errors)
	}

	return nil
}

// PainTypesMultiError is an error wrapping multiple validation errors returned
// by PainTypes.ValidateAll() if the designated constraints aren't met.
type PainTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PainTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PainTypesMultiError) AllErrors() []error { return m }

// PainTypesValidationError is the validation error returned by
// PainTypes.Validate if the designated constraints aren't met.
type PainTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PainTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PainTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PainTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PainTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PainTypesValidationError) ErrorName() string { return "PainTypesValidationError" }

// Error satisfies the builtin error interface
func (e PainTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPainTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PainTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PainTypesValidationError{}

// Validate checks the field values on Sickness with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Sickness) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sickness with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SicknessMultiError, or nil
// if none found.
func (m *Sickness) ValidateAll() error {
	return m.validate(true)
}

func (m *Sickness) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nausea

	// no validation rules for Vomitting

	// no validation rules for Bloating

	// no validation rules for AdditionalNotes

	// no validation rules for ApproximateDate

	if len(errors) > 0 {
		return SicknessMultiError(errors)
	}

	return nil
}

// SicknessMultiError is an error wrapping multiple validation errors returned
// by Sickness.ValidateAll() if the designated constraints aren't met.
type SicknessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SicknessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SicknessMultiError) AllErrors() []error { return m }

// SicknessValidationError is the validation error returned by
// Sickness.Validate if the designated constraints aren't met.
type SicknessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SicknessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SicknessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SicknessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SicknessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SicknessValidationError) ErrorName() string { return "SicknessValidationError" }

// Error satisfies the builtin error interface
func (e SicknessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSickness.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SicknessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SicknessValidationError{}

// Validate checks the field values on EmotionalState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmotionalState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmotionalState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmotionalStateMultiError,
// or nil if none found.
func (m *EmotionalState) ValidateAll() error {
	return m.validate(true)
}

func (m *EmotionalState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Emotions

	// no validation rules for AdditionalNotes

	// no validation rules for ApproximateDate

	if len(errors) > 0 {
		return EmotionalStateMultiError(errors)
	}

	return nil
}

// EmotionalStateMultiError is an error wrapping multiple validation errors
// returned by EmotionalState.ValidateAll() if the designated constraints
// aren't met.
type EmotionalStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmotionalStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmotionalStateMultiError) AllErrors() []error { return m }

// EmotionalStateValidationError is the validation error returned by
// EmotionalState.Validate if the designated constraints aren't met.
type EmotionalStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmotionalStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmotionalStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmotionalStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmotionalStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmotionalStateValidationError) ErrorName() string { return "EmotionalStateValidationError" }

// Error satisfies the builtin error interface
func (e EmotionalStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmotionalState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmotionalStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmotionalStateValidationError{}

// Validate checks the field values on AppetieChanges with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppetieChanges) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppetieChanges with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppetieChangesMultiError,
// or nil if none found.
func (m *AppetieChanges) ValidateAll() error {
	return m.validate(true)
}

func (m *AppetieChanges) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Appetite

	// no validation rules for AdditionalNotes

	// no validation rules for ApproximateDate

	if len(errors) > 0 {
		return AppetieChangesMultiError(errors)
	}

	return nil
}

// AppetieChangesMultiError is an error wrapping multiple validation errors
// returned by AppetieChanges.ValidateAll() if the designated constraints
// aren't met.
type AppetieChangesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppetieChangesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppetieChangesMultiError) AllErrors() []error { return m }

// AppetieChangesValidationError is the validation error returned by
// AppetieChanges.Validate if the designated constraints aren't met.
type AppetieChangesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppetieChangesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppetieChangesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppetieChangesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppetieChangesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppetieChangesValidationError) ErrorName() string { return "AppetieChangesValidationError" }

// Error satisfies the builtin error interface
func (e AppetieChangesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppetieChanges.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppetieChangesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppetieChangesValidationError{}

// Validate checks the field values on PainTypes_Cramping with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PainTypes_Cramping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PainTypes_Cramping with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PainTypes_CrampingMultiError, or nil if none found.
func (m *PainTypes_Cramping) ValidateAll() error {
	return m.validate(true)
}

func (m *PainTypes_Cramping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Intensity

	// no validation rules for Response

	// no validation rules for Normality

	if len(errors) > 0 {
		return PainTypes_CrampingMultiError(errors)
	}

	return nil
}

// PainTypes_CrampingMultiError is an error wrapping multiple validation errors
// returned by PainTypes_Cramping.ValidateAll() if the designated constraints
// aren't met.
type PainTypes_CrampingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PainTypes_CrampingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PainTypes_CrampingMultiError) AllErrors() []error { return m }

// PainTypes_CrampingValidationError is the validation error returned by
// PainTypes_Cramping.Validate if the designated constraints aren't met.
type PainTypes_CrampingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PainTypes_CrampingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PainTypes_CrampingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PainTypes_CrampingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PainTypes_CrampingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PainTypes_CrampingValidationError) ErrorName() string {
	return "PainTypes_CrampingValidationError"
}

// Error satisfies the builtin error interface
func (e PainTypes_CrampingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPainTypes_Cramping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PainTypes_CrampingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PainTypes_CrampingValidationError{}

// Validate checks the field values on PainTypes_Throbbing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PainTypes_Throbbing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PainTypes_Throbbing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PainTypes_ThrobbingMultiError, or nil if none found.
func (m *PainTypes_Throbbing) ValidateAll() error {
	return m.validate(true)
}

func (m *PainTypes_Throbbing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Intensity

	// no validation rules for Response

	// no validation rules for Normality

	if len(errors) > 0 {
		return PainTypes_ThrobbingMultiError(errors)
	}

	return nil
}

// PainTypes_ThrobbingMultiError is an error wrapping multiple validation
// errors returned by PainTypes_Throbbing.ValidateAll() if the designated
// constraints aren't met.
type PainTypes_ThrobbingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PainTypes_ThrobbingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PainTypes_ThrobbingMultiError) AllErrors() []error { return m }

// PainTypes_ThrobbingValidationError is the validation error returned by
// PainTypes_Throbbing.Validate if the designated constraints aren't met.
type PainTypes_ThrobbingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PainTypes_ThrobbingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PainTypes_ThrobbingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PainTypes_ThrobbingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PainTypes_ThrobbingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PainTypes_ThrobbingValidationError) ErrorName() string {
	return "PainTypes_ThrobbingValidationError"
}

// Error satisfies the builtin error interface
func (e PainTypes_ThrobbingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPainTypes_Throbbing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PainTypes_ThrobbingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PainTypes_ThrobbingValidationError{}

// Validate checks the field values on PainTypes_Tightning with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PainTypes_Tightning) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PainTypes_Tightning with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PainTypes_TightningMultiError, or nil if none found.
func (m *PainTypes_Tightning) ValidateAll() error {
	return m.validate(true)
}

func (m *PainTypes_Tightning) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Intensity

	// no validation rules for Response

	// no validation rules for Normality

	if len(errors) > 0 {
		return PainTypes_TightningMultiError(errors)
	}

	return nil
}

// PainTypes_TightningMultiError is an error wrapping multiple validation
// errors returned by PainTypes_Tightning.ValidateAll() if the designated
// constraints aren't met.
type PainTypes_TightningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PainTypes_TightningMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PainTypes_TightningMultiError) AllErrors() []error { return m }

// PainTypes_TightningValidationError is the validation error returned by
// PainTypes_Tightning.Validate if the designated constraints aren't met.
type PainTypes_TightningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PainTypes_TightningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PainTypes_TightningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PainTypes_TightningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PainTypes_TightningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PainTypes_TightningValidationError) ErrorName() string {
	return "PainTypes_TightningValidationError"
}

// Error satisfies the builtin error interface
func (e PainTypes_TightningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPainTypes_Tightning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PainTypes_TightningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PainTypes_TightningValidationError{}

// Validate checks the field values on PainTypes_Stabbing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PainTypes_Stabbing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PainTypes_Stabbing with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PainTypes_StabbingMultiError, or nil if none found.
func (m *PainTypes_Stabbing) ValidateAll() error {
	return m.validate(true)
}

func (m *PainTypes_Stabbing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Intensity

	// no validation rules for Response

	// no validation rules for Normality

	if len(errors) > 0 {
		return PainTypes_StabbingMultiError(errors)
	}

	return nil
}

// PainTypes_StabbingMultiError is an error wrapping multiple validation errors
// returned by PainTypes_Stabbing.ValidateAll() if the designated constraints
// aren't met.
type PainTypes_StabbingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PainTypes_StabbingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PainTypes_StabbingMultiError) AllErrors() []error { return m }

// PainTypes_StabbingValidationError is the validation error returned by
// PainTypes_Stabbing.Validate if the designated constraints aren't met.
type PainTypes_StabbingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PainTypes_StabbingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PainTypes_StabbingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PainTypes_StabbingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PainTypes_StabbingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PainTypes_StabbingValidationError) ErrorName() string {
	return "PainTypes_StabbingValidationError"
}

// Error satisfies the builtin error interface
func (e PainTypes_StabbingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPainTypes_Stabbing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PainTypes_StabbingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PainTypes_StabbingValidationError{}
