syntax = "proto3";

package patient.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

// patient is 
service PatientService {
  // adding patients.
  rpc Create(CreateRequest) returns (CreateResponse){
     option (google.api.http) = {
      post : "/v1"
      body : "*"
    };
  };  

  // quering patients.
  rpc Query(QueryRequest) returns (QueryResponse){
     option (google.api.http) = {
      get : "/v1"
    };
  };

  // retrieving patient.
  rpc Get(GetRequest) returns (GetResponse){
     option (google.api.http) = {
      get : "/v1/{id}"
     
    };
  };

  // UpdateRequest is used to specify a patient to update.
  rpc Update(UpdateRequest) returns (UpdateResponse){
     option (google.api.http) = {
        put : "/v1/{patient.id}"
        body : "*"
    };
  };

  // Delete removes patients
  rpc Delete(DeleteRequest) returns (DeleteResponse){
     option (google.api.http) = {
       delete : "/v1/{id}"
    };
  };
}

// Create contains information needed to create a new patient.
message CreateRequest  { Patient patient = 1[ (validate.rules).message.required = true ]; }
// CreateResponse returns the newly created patient for the Create method.
message CreateResponse { Patient patient = 1; }

// Query is used to specify the patient to retrieve.
message QueryRequest  { 
  int64 offset = 1 [ (validate.rules).int64.gte = 0 ];
  int64 limit = 2 [ (validate.rules).int64.gte = 0 ];
  string search_text = 3;
  string given_names = 4;
  string family_name = 5; 
  string specialist_id = 6; 
}
// QueryResponse returns a paged list of patients
message QueryResponse  { 
  repeated Patient cursor = 1;
  int64 matches = 2;
}

// Get is used to specify the patient to retrieve.
message GetRequest {  string id = 1 [ (validate.rules).string.uuid = true ]; }
// GetResponse returns an patient based on the patient id
message GetResponse { Patient patient = 1; }

// Update is used to specify a patient to update.
message UpdateRequest  { 
  Patient patient = 1;
  google.protobuf.FieldMask update_mask = 2;
}
// UpdateResponse returns an updated patient based on the one provided
message UpdateResponse { Patient patient = 1; }

// Delete contains information needed to create a new person.
message DeleteRequest { string id = 1 [ (validate.rules).string.uuid = true ];}
// DeleteResponse returns an empty response and can be ignored.
message DeleteResponse {}

// patient represents a platform patient uploaded by a specialist
message Patient {
  string id = 1   [ (validate.rules).string = {ignore_empty : true, uuid : true} ];
  string given_names = 2 [ (validate.rules).string = {min_len : 2, max_len : 50} ];
  string family_name = 3 [ (validate.rules).string = {min_len : 2, max_len : 50} ];
  string date_of_birth = 4 [ (validate.rules).string = {
    ignore_empty : true,
    pattern : "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
  } ];
  string nhi_number = 5;
  string email = 6;
  string initial_appointment_date = 7 [ (validate.rules).string = {
    ignore_empty : true,
    pattern : "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
  } ];
  google.protobuf.Timestamp created_at = 8; 
  MedicalDetails medical_details = 9;
  string specialist_id = 10;
}

// All the medical info available for each patient
message MedicalDetails  {
  PainTypes pain_types = 1; 
  bool nausea = 2; 
  bool vomitting = 3; 
  bool bloating = 4; 
  EmotionalState emotional_state = 5; 
  bool body_aches = 6; 
  bool energy = 7;
  string skin_changes = 8;
  AppetieChanges appetite = 9; 
  string focus_levels = 10; 
}
 // determines what kind of pain patient has
message PainTypes {
    // Pain intensity
    enum Pain {
        PAIN_UNSPECIFIED = 0; 
        PAIN_MILD = 1;
        PAIN_MODERATE = 2; 
        PAIN_HIGH = 3; 
        PAIN_SEVERE = 4;
        PAIN_CHRONIC = 5; 
      }
      // determines whether it impacts day to day life 
      enum Response {
        RESPONSE_UNSPECIFIED= 0; 
        RESPONSE_MANAGEABLE = 1; 
        RESPONSE_CHALLENGING = 2; 
        RESPONSE_UNMANAGEABLE = 3; 
      }
      // determines whether pain is normal for patient
      enum Normality {
        NORMALITY_UNSPECIFIED= 0; 
        NORMALITY_INFREQUENT = 1; 
        NORMALITY_SOMETIMES = 2; 
        NORMALITY_FREQUENT = 3; 
      }
      // cramping details
      message Cramping {
        Pain intensity = 1; 
        Response response = 2;
        Normality normality = 3; 
      }
       // throbbing details
      message Throbbing {
        Pain intensity = 1; 
        Response response = 2;
        Normality normality = 3; 
      }
      // Tightning details
      message Tightning {
        Pain intensity = 1; 
        Response response = 2;
        Normality normality = 3; 
      }
      // stabbing
      message Stabbing {
        Pain intensity = 1; 
        Response response = 2;
        Normality normality = 3; 
      }
    Cramping cramping = 1; 
    Throbbing throbbing = 2;  
    Tightning  tightning = 3;
    Stabbing stabbing = 4;
    string additional_notes = 5;
  } 
// emotional state
message EmotionalState {
  // emotion scale
  enum Emotions {
    EMOTIONS_UNSPECIFIED= 0; 
    EMOTIONS_LOWER = 1; 
    EMOTIONS_HIGHER = 2; 
  }
  Emotions emotions = 1;
  string additional_notes = 2; 
} 
// appetite
message AppetieChanges {
  // emotion scale
  enum Appetite {
    APPETITE_UNSPECIFIED= 0; 
    APPETITE_LOWER = 1; 
    APPETITE_HIGHER = 2; 
  }
  Appetite appetite = 1; 
  string additional_notes = 2; 
} 