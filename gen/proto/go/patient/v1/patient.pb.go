// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: patient/v1/patient.proto

package patientv1

import (
	_ "go.buf.build/grpc/go/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// defines overrall patient risk
type Risk int32

const (
	Risk_RISK_UNSPECIFIED Risk = 0
	Risk_RISK_LOW         Risk = 1
	Risk_RISK_MEDIUM      Risk = 2
	Risk_RISK_HIGH        Risk = 3
)

// Enum value maps for Risk.
var (
	Risk_name = map[int32]string{
		0: "RISK_UNSPECIFIED",
		1: "RISK_LOW",
		2: "RISK_MEDIUM",
		3: "RISK_HIGH",
	}
	Risk_value = map[string]int32{
		"RISK_UNSPECIFIED": 0,
		"RISK_LOW":         1,
		"RISK_MEDIUM":      2,
		"RISK_HIGH":        3,
	}
)

func (x Risk) Enum() *Risk {
	p := new(Risk)
	*p = x
	return p
}

func (x Risk) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Risk) Descriptor() protoreflect.EnumDescriptor {
	return file_patient_v1_patient_proto_enumTypes[0].Descriptor()
}

func (Risk) Type() protoreflect.EnumType {
	return &file_patient_v1_patient_proto_enumTypes[0]
}

func (x Risk) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Risk.Descriptor instead.
func (Risk) EnumDescriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{0}
}

// Pain intensity
type PainTypes_Pain int32

const (
	PainTypes_PAIN_UNSPECIFIED PainTypes_Pain = 0
	PainTypes_PAIN_MILD        PainTypes_Pain = 1
	PainTypes_PAIN_MODERATE    PainTypes_Pain = 2
	PainTypes_PAIN_HIGH        PainTypes_Pain = 3
	PainTypes_PAIN_SEVERE      PainTypes_Pain = 4
	PainTypes_PAIN_CHRONIC     PainTypes_Pain = 5
)

// Enum value maps for PainTypes_Pain.
var (
	PainTypes_Pain_name = map[int32]string{
		0: "PAIN_UNSPECIFIED",
		1: "PAIN_MILD",
		2: "PAIN_MODERATE",
		3: "PAIN_HIGH",
		4: "PAIN_SEVERE",
		5: "PAIN_CHRONIC",
	}
	PainTypes_Pain_value = map[string]int32{
		"PAIN_UNSPECIFIED": 0,
		"PAIN_MILD":        1,
		"PAIN_MODERATE":    2,
		"PAIN_HIGH":        3,
		"PAIN_SEVERE":      4,
		"PAIN_CHRONIC":     5,
	}
)

func (x PainTypes_Pain) Enum() *PainTypes_Pain {
	p := new(PainTypes_Pain)
	*p = x
	return p
}

func (x PainTypes_Pain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PainTypes_Pain) Descriptor() protoreflect.EnumDescriptor {
	return file_patient_v1_patient_proto_enumTypes[1].Descriptor()
}

func (PainTypes_Pain) Type() protoreflect.EnumType {
	return &file_patient_v1_patient_proto_enumTypes[1]
}

func (x PainTypes_Pain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PainTypes_Pain.Descriptor instead.
func (PainTypes_Pain) EnumDescriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{12, 0}
}

// determines whether it impacts day to day life
type PainTypes_Response int32

const (
	PainTypes_RESPONSE_UNSPECIFIED  PainTypes_Response = 0
	PainTypes_RESPONSE_MANAGEABLE   PainTypes_Response = 1
	PainTypes_RESPONSE_CHALLENGING  PainTypes_Response = 2
	PainTypes_RESPONSE_UNMANAGEABLE PainTypes_Response = 3
)

// Enum value maps for PainTypes_Response.
var (
	PainTypes_Response_name = map[int32]string{
		0: "RESPONSE_UNSPECIFIED",
		1: "RESPONSE_MANAGEABLE",
		2: "RESPONSE_CHALLENGING",
		3: "RESPONSE_UNMANAGEABLE",
	}
	PainTypes_Response_value = map[string]int32{
		"RESPONSE_UNSPECIFIED":  0,
		"RESPONSE_MANAGEABLE":   1,
		"RESPONSE_CHALLENGING":  2,
		"RESPONSE_UNMANAGEABLE": 3,
	}
)

func (x PainTypes_Response) Enum() *PainTypes_Response {
	p := new(PainTypes_Response)
	*p = x
	return p
}

func (x PainTypes_Response) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PainTypes_Response) Descriptor() protoreflect.EnumDescriptor {
	return file_patient_v1_patient_proto_enumTypes[2].Descriptor()
}

func (PainTypes_Response) Type() protoreflect.EnumType {
	return &file_patient_v1_patient_proto_enumTypes[2]
}

func (x PainTypes_Response) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PainTypes_Response.Descriptor instead.
func (PainTypes_Response) EnumDescriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{12, 1}
}

// determines whether pain is normal for patient
type PainTypes_Normality int32

const (
	PainTypes_NORMALITY_UNSPECIFIED PainTypes_Normality = 0
	PainTypes_NORMALITY_INFREQUENT  PainTypes_Normality = 1
	PainTypes_NORMALITY_SOMETIMES   PainTypes_Normality = 2
	PainTypes_NORMALITY_FREQUENT    PainTypes_Normality = 3
)

// Enum value maps for PainTypes_Normality.
var (
	PainTypes_Normality_name = map[int32]string{
		0: "NORMALITY_UNSPECIFIED",
		1: "NORMALITY_INFREQUENT",
		2: "NORMALITY_SOMETIMES",
		3: "NORMALITY_FREQUENT",
	}
	PainTypes_Normality_value = map[string]int32{
		"NORMALITY_UNSPECIFIED": 0,
		"NORMALITY_INFREQUENT":  1,
		"NORMALITY_SOMETIMES":   2,
		"NORMALITY_FREQUENT":    3,
	}
)

func (x PainTypes_Normality) Enum() *PainTypes_Normality {
	p := new(PainTypes_Normality)
	*p = x
	return p
}

func (x PainTypes_Normality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PainTypes_Normality) Descriptor() protoreflect.EnumDescriptor {
	return file_patient_v1_patient_proto_enumTypes[3].Descriptor()
}

func (PainTypes_Normality) Type() protoreflect.EnumType {
	return &file_patient_v1_patient_proto_enumTypes[3]
}

func (x PainTypes_Normality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PainTypes_Normality.Descriptor instead.
func (PainTypes_Normality) EnumDescriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{12, 2}
}

// emotion scale
type EmotionalState_Emotions int32

const (
	EmotionalState_EMOTIONS_UNSPECIFIED EmotionalState_Emotions = 0
	EmotionalState_EMOTIONS_LOWER       EmotionalState_Emotions = 1
	EmotionalState_EMOTIONS_HIGHER      EmotionalState_Emotions = 2
)

// Enum value maps for EmotionalState_Emotions.
var (
	EmotionalState_Emotions_name = map[int32]string{
		0: "EMOTIONS_UNSPECIFIED",
		1: "EMOTIONS_LOWER",
		2: "EMOTIONS_HIGHER",
	}
	EmotionalState_Emotions_value = map[string]int32{
		"EMOTIONS_UNSPECIFIED": 0,
		"EMOTIONS_LOWER":       1,
		"EMOTIONS_HIGHER":      2,
	}
)

func (x EmotionalState_Emotions) Enum() *EmotionalState_Emotions {
	p := new(EmotionalState_Emotions)
	*p = x
	return p
}

func (x EmotionalState_Emotions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmotionalState_Emotions) Descriptor() protoreflect.EnumDescriptor {
	return file_patient_v1_patient_proto_enumTypes[4].Descriptor()
}

func (EmotionalState_Emotions) Type() protoreflect.EnumType {
	return &file_patient_v1_patient_proto_enumTypes[4]
}

func (x EmotionalState_Emotions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmotionalState_Emotions.Descriptor instead.
func (EmotionalState_Emotions) EnumDescriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{14, 0}
}

// emotion scale
type AppetieChanges_Appetite int32

const (
	AppetieChanges_APPETITE_UNSPECIFIED AppetieChanges_Appetite = 0
	AppetieChanges_APPETITE_LOWER       AppetieChanges_Appetite = 1
	AppetieChanges_APPETITE_HIGHER      AppetieChanges_Appetite = 2
)

// Enum value maps for AppetieChanges_Appetite.
var (
	AppetieChanges_Appetite_name = map[int32]string{
		0: "APPETITE_UNSPECIFIED",
		1: "APPETITE_LOWER",
		2: "APPETITE_HIGHER",
	}
	AppetieChanges_Appetite_value = map[string]int32{
		"APPETITE_UNSPECIFIED": 0,
		"APPETITE_LOWER":       1,
		"APPETITE_HIGHER":      2,
	}
)

func (x AppetieChanges_Appetite) Enum() *AppetieChanges_Appetite {
	p := new(AppetieChanges_Appetite)
	*p = x
	return p
}

func (x AppetieChanges_Appetite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppetieChanges_Appetite) Descriptor() protoreflect.EnumDescriptor {
	return file_patient_v1_patient_proto_enumTypes[5].Descriptor()
}

func (AppetieChanges_Appetite) Type() protoreflect.EnumType {
	return &file_patient_v1_patient_proto_enumTypes[5]
}

func (x AppetieChanges_Appetite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppetieChanges_Appetite.Descriptor instead.
func (AppetieChanges_Appetite) EnumDescriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{15, 0}
}

// Create contains information needed to create a new patient.
type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRequest) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

// CreateResponse returns the newly created patient for the Create method.
type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{1}
}

func (x *CreateResponse) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

// Query is used to specify the patient to retrieve.
type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset     int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit      int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	SearchText string `protobuf:"bytes,3,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	AuthId     string `protobuf:"bytes,4,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{2}
}

func (x *QueryRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryRequest) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *QueryRequest) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

// QueryResponse returns a paged list of patients
type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor  []*Patient `protobuf:"bytes,1,rep,name=cursor,proto3" json:"cursor,omitempty"`
	Matches int64      `protobuf:"varint,2,opt,name=matches,proto3" json:"matches,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{3}
}

func (x *QueryResponse) GetCursor() []*Patient {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *QueryResponse) GetMatches() int64 {
	if x != nil {
		return x.Matches
	}
	return 0
}

// Get is used to specify the patient to retrieve.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{4}
}

func (x *GetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// GetResponse returns an patient based on the patient id
type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{5}
}

func (x *GetResponse) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

// Update is used to specify a patient to update.
type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient    *Patient               `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRequest) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *UpdateRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateResponse returns an updated patient based on the one provided
type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateResponse) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

// Delete contains information needed to remove a patient.
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DeleteResponse returns an empty response and can be ignored.
type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{9}
}

// patient represents a platform patient uploaded by a specialist
type Patient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GivenNames             string          `protobuf:"bytes,2,opt,name=given_names,json=givenNames,proto3" json:"given_names,omitempty"`
	FamilyName             string          `protobuf:"bytes,3,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	DateOfBirth            string          `protobuf:"bytes,4,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	NhiNumber              string          `protobuf:"bytes,5,opt,name=nhi_number,json=nhiNumber,proto3" json:"nhi_number,omitempty"`
	Email                  string          `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	InitialAppointmentDate string          `protobuf:"bytes,7,opt,name=initial_appointment_date,json=initialAppointmentDate,proto3" json:"initial_appointment_date,omitempty"`
	CreatedAt              int64           `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MedicalDetails         *MedicalDetails `protobuf:"bytes,9,opt,name=medical_details,json=medicalDetails,proto3" json:"medical_details,omitempty"`
	SpecialistId           string          `protobuf:"bytes,10,opt,name=specialist_id,json=specialistId,proto3" json:"specialist_id,omitempty"`
	IconColor              string          `protobuf:"bytes,11,opt,name=icon_color,json=iconColor,proto3" json:"icon_color,omitempty"`
}

func (x *Patient) Reset() {
	*x = Patient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient) ProtoMessage() {}

func (x *Patient) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient.ProtoReflect.Descriptor instead.
func (*Patient) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{10}
}

func (x *Patient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Patient) GetGivenNames() string {
	if x != nil {
		return x.GivenNames
	}
	return ""
}

func (x *Patient) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *Patient) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *Patient) GetNhiNumber() string {
	if x != nil {
		return x.NhiNumber
	}
	return ""
}

func (x *Patient) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Patient) GetInitialAppointmentDate() string {
	if x != nil {
		return x.InitialAppointmentDate
	}
	return ""
}

func (x *Patient) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Patient) GetMedicalDetails() *MedicalDetails {
	if x != nil {
		return x.MedicalDetails
	}
	return nil
}

func (x *Patient) GetSpecialistId() string {
	if x != nil {
		return x.SpecialistId
	}
	return ""
}

func (x *Patient) GetIconColor() string {
	if x != nil {
		return x.IconColor
	}
	return ""
}

// All the medical info available for each patient
type MedicalDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PainTypes       *PainTypes      `protobuf:"bytes,1,opt,name=pain_types,json=painTypes,proto3" json:"pain_types,omitempty"`
	Sickness        bool            `protobuf:"varint,2,opt,name=sickness,proto3" json:"sickness,omitempty"`
	SicknessDetails *Sickness       `protobuf:"bytes,3,opt,name=sickness_details,json=sicknessDetails,proto3" json:"sickness_details,omitempty"`
	EmotionalState  *EmotionalState `protobuf:"bytes,4,opt,name=emotional_state,json=emotionalState,proto3" json:"emotional_state,omitempty"`
	BodyAches       bool            `protobuf:"varint,5,opt,name=body_aches,json=bodyAches,proto3" json:"body_aches,omitempty"`
	Energy          bool            `protobuf:"varint,6,opt,name=energy,proto3" json:"energy,omitempty"`
	SkinChanges     string          `protobuf:"bytes,7,opt,name=skin_changes,json=skinChanges,proto3" json:"skin_changes,omitempty"`
	Appetite        *AppetieChanges `protobuf:"bytes,8,opt,name=appetite,proto3" json:"appetite,omitempty"`
	FocusLevels     string          `protobuf:"bytes,9,opt,name=focus_levels,json=focusLevels,proto3" json:"focus_levels,omitempty"`
	Surgeries       int32           `protobuf:"varint,10,opt,name=surgeries,proto3" json:"surgeries,omitempty"`
	Risk            Risk            `protobuf:"varint,11,opt,name=risk,proto3,enum=patient.v1.Risk" json:"risk,omitempty"`
}

func (x *MedicalDetails) Reset() {
	*x = MedicalDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalDetails) ProtoMessage() {}

func (x *MedicalDetails) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalDetails.ProtoReflect.Descriptor instead.
func (*MedicalDetails) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{11}
}

func (x *MedicalDetails) GetPainTypes() *PainTypes {
	if x != nil {
		return x.PainTypes
	}
	return nil
}

func (x *MedicalDetails) GetSickness() bool {
	if x != nil {
		return x.Sickness
	}
	return false
}

func (x *MedicalDetails) GetSicknessDetails() *Sickness {
	if x != nil {
		return x.SicknessDetails
	}
	return nil
}

func (x *MedicalDetails) GetEmotionalState() *EmotionalState {
	if x != nil {
		return x.EmotionalState
	}
	return nil
}

func (x *MedicalDetails) GetBodyAches() bool {
	if x != nil {
		return x.BodyAches
	}
	return false
}

func (x *MedicalDetails) GetEnergy() bool {
	if x != nil {
		return x.Energy
	}
	return false
}

func (x *MedicalDetails) GetSkinChanges() string {
	if x != nil {
		return x.SkinChanges
	}
	return ""
}

func (x *MedicalDetails) GetAppetite() *AppetieChanges {
	if x != nil {
		return x.Appetite
	}
	return nil
}

func (x *MedicalDetails) GetFocusLevels() string {
	if x != nil {
		return x.FocusLevels
	}
	return ""
}

func (x *MedicalDetails) GetSurgeries() int32 {
	if x != nil {
		return x.Surgeries
	}
	return 0
}

func (x *MedicalDetails) GetRisk() Risk {
	if x != nil {
		return x.Risk
	}
	return Risk_RISK_UNSPECIFIED
}

// determines what kind of pain patient has
type PainTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cramping        *PainTypes_Cramping  `protobuf:"bytes,1,opt,name=cramping,proto3" json:"cramping,omitempty"`
	Throbbing       *PainTypes_Throbbing `protobuf:"bytes,2,opt,name=throbbing,proto3" json:"throbbing,omitempty"`
	Tightning       *PainTypes_Tightning `protobuf:"bytes,3,opt,name=tightning,proto3" json:"tightning,omitempty"`
	Stabbing        *PainTypes_Stabbing  `protobuf:"bytes,4,opt,name=stabbing,proto3" json:"stabbing,omitempty"`
	AdditionalNotes string               `protobuf:"bytes,5,opt,name=additional_notes,json=additionalNotes,proto3" json:"additional_notes,omitempty"`
}

func (x *PainTypes) Reset() {
	*x = PainTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PainTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PainTypes) ProtoMessage() {}

func (x *PainTypes) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PainTypes.ProtoReflect.Descriptor instead.
func (*PainTypes) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{12}
}

func (x *PainTypes) GetCramping() *PainTypes_Cramping {
	if x != nil {
		return x.Cramping
	}
	return nil
}

func (x *PainTypes) GetThrobbing() *PainTypes_Throbbing {
	if x != nil {
		return x.Throbbing
	}
	return nil
}

func (x *PainTypes) GetTightning() *PainTypes_Tightning {
	if x != nil {
		return x.Tightning
	}
	return nil
}

func (x *PainTypes) GetStabbing() *PainTypes_Stabbing {
	if x != nil {
		return x.Stabbing
	}
	return nil
}

func (x *PainTypes) GetAdditionalNotes() string {
	if x != nil {
		return x.AdditionalNotes
	}
	return ""
}

// determines how patient feels with sickness
type Sickness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nausea          bool   `protobuf:"varint,1,opt,name=nausea,proto3" json:"nausea,omitempty"`
	Vomitting       bool   `protobuf:"varint,2,opt,name=vomitting,proto3" json:"vomitting,omitempty"`
	Bloating        bool   `protobuf:"varint,3,opt,name=bloating,proto3" json:"bloating,omitempty"`
	AdditionalNotes string `protobuf:"bytes,4,opt,name=additional_notes,json=additionalNotes,proto3" json:"additional_notes,omitempty"`
	ApproximateDate string `protobuf:"bytes,5,opt,name=approximate_date,json=approximateDate,proto3" json:"approximate_date,omitempty"`
}

func (x *Sickness) Reset() {
	*x = Sickness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sickness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sickness) ProtoMessage() {}

func (x *Sickness) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sickness.ProtoReflect.Descriptor instead.
func (*Sickness) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{13}
}

func (x *Sickness) GetNausea() bool {
	if x != nil {
		return x.Nausea
	}
	return false
}

func (x *Sickness) GetVomitting() bool {
	if x != nil {
		return x.Vomitting
	}
	return false
}

func (x *Sickness) GetBloating() bool {
	if x != nil {
		return x.Bloating
	}
	return false
}

func (x *Sickness) GetAdditionalNotes() string {
	if x != nil {
		return x.AdditionalNotes
	}
	return ""
}

func (x *Sickness) GetApproximateDate() string {
	if x != nil {
		return x.ApproximateDate
	}
	return ""
}

// emotional state
type EmotionalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emotions        EmotionalState_Emotions `protobuf:"varint,1,opt,name=emotions,proto3,enum=patient.v1.EmotionalState_Emotions" json:"emotions,omitempty"`
	AdditionalNotes string                  `protobuf:"bytes,2,opt,name=additional_notes,json=additionalNotes,proto3" json:"additional_notes,omitempty"`
	ApproximateDate string                  `protobuf:"bytes,3,opt,name=approximate_date,json=approximateDate,proto3" json:"approximate_date,omitempty"`
}

func (x *EmotionalState) Reset() {
	*x = EmotionalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmotionalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionalState) ProtoMessage() {}

func (x *EmotionalState) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionalState.ProtoReflect.Descriptor instead.
func (*EmotionalState) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{14}
}

func (x *EmotionalState) GetEmotions() EmotionalState_Emotions {
	if x != nil {
		return x.Emotions
	}
	return EmotionalState_EMOTIONS_UNSPECIFIED
}

func (x *EmotionalState) GetAdditionalNotes() string {
	if x != nil {
		return x.AdditionalNotes
	}
	return ""
}

func (x *EmotionalState) GetApproximateDate() string {
	if x != nil {
		return x.ApproximateDate
	}
	return ""
}

// appetite
type AppetieChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appetite        AppetieChanges_Appetite `protobuf:"varint,1,opt,name=appetite,proto3,enum=patient.v1.AppetieChanges_Appetite" json:"appetite,omitempty"`
	AdditionalNotes string                  `protobuf:"bytes,2,opt,name=additional_notes,json=additionalNotes,proto3" json:"additional_notes,omitempty"`
	ApproximateDate string                  `protobuf:"bytes,3,opt,name=approximate_date,json=approximateDate,proto3" json:"approximate_date,omitempty"`
}

func (x *AppetieChanges) Reset() {
	*x = AppetieChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppetieChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppetieChanges) ProtoMessage() {}

func (x *AppetieChanges) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppetieChanges.ProtoReflect.Descriptor instead.
func (*AppetieChanges) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{15}
}

func (x *AppetieChanges) GetAppetite() AppetieChanges_Appetite {
	if x != nil {
		return x.Appetite
	}
	return AppetieChanges_APPETITE_UNSPECIFIED
}

func (x *AppetieChanges) GetAdditionalNotes() string {
	if x != nil {
		return x.AdditionalNotes
	}
	return ""
}

func (x *AppetieChanges) GetApproximateDate() string {
	if x != nil {
		return x.ApproximateDate
	}
	return ""
}

// cramping details
type PainTypes_Cramping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intensity PainTypes_Pain      `protobuf:"varint,1,opt,name=intensity,proto3,enum=patient.v1.PainTypes_Pain" json:"intensity,omitempty"`
	Response  PainTypes_Response  `protobuf:"varint,2,opt,name=response,proto3,enum=patient.v1.PainTypes_Response" json:"response,omitempty"`
	Normality PainTypes_Normality `protobuf:"varint,3,opt,name=normality,proto3,enum=patient.v1.PainTypes_Normality" json:"normality,omitempty"`
}

func (x *PainTypes_Cramping) Reset() {
	*x = PainTypes_Cramping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PainTypes_Cramping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PainTypes_Cramping) ProtoMessage() {}

func (x *PainTypes_Cramping) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PainTypes_Cramping.ProtoReflect.Descriptor instead.
func (*PainTypes_Cramping) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{12, 0}
}

func (x *PainTypes_Cramping) GetIntensity() PainTypes_Pain {
	if x != nil {
		return x.Intensity
	}
	return PainTypes_PAIN_UNSPECIFIED
}

func (x *PainTypes_Cramping) GetResponse() PainTypes_Response {
	if x != nil {
		return x.Response
	}
	return PainTypes_RESPONSE_UNSPECIFIED
}

func (x *PainTypes_Cramping) GetNormality() PainTypes_Normality {
	if x != nil {
		return x.Normality
	}
	return PainTypes_NORMALITY_UNSPECIFIED
}

// throbbing details
type PainTypes_Throbbing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intensity PainTypes_Pain      `protobuf:"varint,1,opt,name=intensity,proto3,enum=patient.v1.PainTypes_Pain" json:"intensity,omitempty"`
	Response  PainTypes_Response  `protobuf:"varint,2,opt,name=response,proto3,enum=patient.v1.PainTypes_Response" json:"response,omitempty"`
	Normality PainTypes_Normality `protobuf:"varint,3,opt,name=normality,proto3,enum=patient.v1.PainTypes_Normality" json:"normality,omitempty"`
}

func (x *PainTypes_Throbbing) Reset() {
	*x = PainTypes_Throbbing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PainTypes_Throbbing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PainTypes_Throbbing) ProtoMessage() {}

func (x *PainTypes_Throbbing) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PainTypes_Throbbing.ProtoReflect.Descriptor instead.
func (*PainTypes_Throbbing) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{12, 1}
}

func (x *PainTypes_Throbbing) GetIntensity() PainTypes_Pain {
	if x != nil {
		return x.Intensity
	}
	return PainTypes_PAIN_UNSPECIFIED
}

func (x *PainTypes_Throbbing) GetResponse() PainTypes_Response {
	if x != nil {
		return x.Response
	}
	return PainTypes_RESPONSE_UNSPECIFIED
}

func (x *PainTypes_Throbbing) GetNormality() PainTypes_Normality {
	if x != nil {
		return x.Normality
	}
	return PainTypes_NORMALITY_UNSPECIFIED
}

// Tightning details
type PainTypes_Tightning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intensity PainTypes_Pain      `protobuf:"varint,1,opt,name=intensity,proto3,enum=patient.v1.PainTypes_Pain" json:"intensity,omitempty"`
	Response  PainTypes_Response  `protobuf:"varint,2,opt,name=response,proto3,enum=patient.v1.PainTypes_Response" json:"response,omitempty"`
	Normality PainTypes_Normality `protobuf:"varint,3,opt,name=normality,proto3,enum=patient.v1.PainTypes_Normality" json:"normality,omitempty"`
}

func (x *PainTypes_Tightning) Reset() {
	*x = PainTypes_Tightning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PainTypes_Tightning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PainTypes_Tightning) ProtoMessage() {}

func (x *PainTypes_Tightning) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PainTypes_Tightning.ProtoReflect.Descriptor instead.
func (*PainTypes_Tightning) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{12, 2}
}

func (x *PainTypes_Tightning) GetIntensity() PainTypes_Pain {
	if x != nil {
		return x.Intensity
	}
	return PainTypes_PAIN_UNSPECIFIED
}

func (x *PainTypes_Tightning) GetResponse() PainTypes_Response {
	if x != nil {
		return x.Response
	}
	return PainTypes_RESPONSE_UNSPECIFIED
}

func (x *PainTypes_Tightning) GetNormality() PainTypes_Normality {
	if x != nil {
		return x.Normality
	}
	return PainTypes_NORMALITY_UNSPECIFIED
}

// stabbing
type PainTypes_Stabbing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intensity PainTypes_Pain      `protobuf:"varint,1,opt,name=intensity,proto3,enum=patient.v1.PainTypes_Pain" json:"intensity,omitempty"`
	Response  PainTypes_Response  `protobuf:"varint,2,opt,name=response,proto3,enum=patient.v1.PainTypes_Response" json:"response,omitempty"`
	Normality PainTypes_Normality `protobuf:"varint,3,opt,name=normality,proto3,enum=patient.v1.PainTypes_Normality" json:"normality,omitempty"`
}

func (x *PainTypes_Stabbing) Reset() {
	*x = PainTypes_Stabbing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_patient_v1_patient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PainTypes_Stabbing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PainTypes_Stabbing) ProtoMessage() {}

func (x *PainTypes_Stabbing) ProtoReflect() protoreflect.Message {
	mi := &file_patient_v1_patient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PainTypes_Stabbing.ProtoReflect.Descriptor instead.
func (*PainTypes_Stabbing) Descriptor() ([]byte, []int) {
	return file_patient_v1_patient_proto_rawDescGZIP(), []int{12, 3}
}

func (x *PainTypes_Stabbing) GetIntensity() PainTypes_Pain {
	if x != nil {
		return x.Intensity
	}
	return PainTypes_PAIN_UNSPECIFIED
}

func (x *PainTypes_Stabbing) GetResponse() PainTypes_Response {
	if x != nil {
		return x.Response
	}
	return PainTypes_RESPONSE_UNSPECIFIED
}

func (x *PainTypes_Stabbing) GetNormality() PainTypes_Normality {
	if x != nil {
		return x.Normality
	}
	return PainTypes_NORMALITY_UNSPECIFIED
}

var File_patient_v1_patient_proto protoreflect.FileDescriptor

var file_patient_v1_patient_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x48, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x26,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x22, 0x7b, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x3f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x22, 0x29, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x10, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb1, 0x04, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01,
	0x01, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x02, 0x18, 0x32, 0x52, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x02, 0x18, 0x32, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x5e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x37, 0x72, 0x35, 0x32, 0x30,
	0x5e, 0x5c, 0x64, 0x7b, 0x34, 0x7d, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31,
	0x5b, 0x30, 0x2d, 0x32, 0x5d, 0x29, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x5b,
	0x31, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x31, 0x5d, 0x29, 0x24,
	0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x68, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x68, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x74, 0x0a, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x37, 0x72, 0x35, 0x32, 0x30,
	0x5e, 0x5c, 0x64, 0x7b, 0x34, 0x7d, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31,
	0x5b, 0x30, 0x2d, 0x32, 0x5d, 0x29, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x5b,
	0x31, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x31, 0x5d, 0x29, 0x24,
	0xd0, 0x01, 0x01, 0x52, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0xe1, 0x03, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x09, 0x70, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x69, 0x63, 0x6b,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x73, 0x69, 0x63, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e,
	0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6b, 0x69,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x74, 0x69, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x08, 0x61, 0x70, 0x70, 0x65, 0x74, 0x69, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x72, 0x67, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x72, 0x67, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x73,
	0x6b, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x22, 0x8f, 0x0b, 0x0a, 0x09, 0x50, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x72, 0x61, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x72, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x63, 0x72, 0x61, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x6f, 0x62, 0x62, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x6f,
	0x62, 0x62, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x74, 0x68, 0x72, 0x6f, 0x62, 0x62, 0x69, 0x6e, 0x67,
	0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x74, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x62, 0x62, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x62, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x73, 0x74, 0x61, 0x62, 0x62, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x08, 0x43, 0x72, 0x61, 0x6d, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x69, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xc0, 0x01, 0x0a, 0x09, 0x54, 0x68, 0x72,
	0x6f, 0x62, 0x62, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xc0, 0x01, 0x0a, 0x09,
	0x54, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xbf,
	0x01, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x62, 0x62, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x70, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x49, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x45, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x49, 0x43,
	0x10, 0x05, 0x22, 0x72, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x71, 0x0a, 0x09, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x4f, 0x4d, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0xb2, 0x01, 0x0a, 0x08, 0x53, 0x69,
	0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x75, 0x73, 0x65, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x61, 0x75, 0x73, 0x65, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x6f, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x76, 0x6f, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x62, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0xf6,
	0x01, 0x0a, 0x0e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x4d, 0x0a, 0x08, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x45, 0x52, 0x10, 0x02, 0x22, 0xf6, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x65,
	0x74, 0x69, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x74, 0x69,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x65, 0x52, 0x08, 0x61, 0x70, 0x70, 0x65, 0x74, 0x69, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x4d, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x65, 0x74, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x50, 0x50, 0x45, 0x54, 0x49, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50, 0x50, 0x45, 0x54,
	0x49, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x50, 0x50, 0x45, 0x54, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x10, 0x02,
	0x2a, 0x4a, 0x0a, 0x04, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x32, 0xa7, 0x03, 0x0a,
	0x0e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x3a, 0x01, 0x2a, 0x22, 0x03, 0x2f, 0x76, 0x31,
	0x12, 0x49, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x2e, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x05, 0x12, 0x03, 0x2f, 0x76, 0x31, 0x12, 0x48, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5c, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01,
	0x2a, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x69, 0x64, 0x7d, 0x12, 0x51, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x2e,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x2a, 0x08, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0xaa, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x64, 0x6f, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x3b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50,
	0x58, 0x58, 0xaa, 0x02, 0x0a, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x0a, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_patient_v1_patient_proto_rawDescOnce sync.Once
	file_patient_v1_patient_proto_rawDescData = file_patient_v1_patient_proto_rawDesc
)

func file_patient_v1_patient_proto_rawDescGZIP() []byte {
	file_patient_v1_patient_proto_rawDescOnce.Do(func() {
		file_patient_v1_patient_proto_rawDescData = protoimpl.X.CompressGZIP(file_patient_v1_patient_proto_rawDescData)
	})
	return file_patient_v1_patient_proto_rawDescData
}

var file_patient_v1_patient_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_patient_v1_patient_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_patient_v1_patient_proto_goTypes = []interface{}{
	(Risk)(0),                     // 0: patient.v1.Risk
	(PainTypes_Pain)(0),           // 1: patient.v1.PainTypes.Pain
	(PainTypes_Response)(0),       // 2: patient.v1.PainTypes.Response
	(PainTypes_Normality)(0),      // 3: patient.v1.PainTypes.Normality
	(EmotionalState_Emotions)(0),  // 4: patient.v1.EmotionalState.Emotions
	(AppetieChanges_Appetite)(0),  // 5: patient.v1.AppetieChanges.Appetite
	(*CreateRequest)(nil),         // 6: patient.v1.CreateRequest
	(*CreateResponse)(nil),        // 7: patient.v1.CreateResponse
	(*QueryRequest)(nil),          // 8: patient.v1.QueryRequest
	(*QueryResponse)(nil),         // 9: patient.v1.QueryResponse
	(*GetRequest)(nil),            // 10: patient.v1.GetRequest
	(*GetResponse)(nil),           // 11: patient.v1.GetResponse
	(*UpdateRequest)(nil),         // 12: patient.v1.UpdateRequest
	(*UpdateResponse)(nil),        // 13: patient.v1.UpdateResponse
	(*DeleteRequest)(nil),         // 14: patient.v1.DeleteRequest
	(*DeleteResponse)(nil),        // 15: patient.v1.DeleteResponse
	(*Patient)(nil),               // 16: patient.v1.Patient
	(*MedicalDetails)(nil),        // 17: patient.v1.MedicalDetails
	(*PainTypes)(nil),             // 18: patient.v1.PainTypes
	(*Sickness)(nil),              // 19: patient.v1.Sickness
	(*EmotionalState)(nil),        // 20: patient.v1.EmotionalState
	(*AppetieChanges)(nil),        // 21: patient.v1.AppetieChanges
	(*PainTypes_Cramping)(nil),    // 22: patient.v1.PainTypes.Cramping
	(*PainTypes_Throbbing)(nil),   // 23: patient.v1.PainTypes.Throbbing
	(*PainTypes_Tightning)(nil),   // 24: patient.v1.PainTypes.Tightning
	(*PainTypes_Stabbing)(nil),    // 25: patient.v1.PainTypes.Stabbing
	(*fieldmaskpb.FieldMask)(nil), // 26: google.protobuf.FieldMask
}
var file_patient_v1_patient_proto_depIdxs = []int32{
	16, // 0: patient.v1.CreateRequest.patient:type_name -> patient.v1.Patient
	16, // 1: patient.v1.CreateResponse.patient:type_name -> patient.v1.Patient
	16, // 2: patient.v1.QueryResponse.cursor:type_name -> patient.v1.Patient
	16, // 3: patient.v1.GetResponse.patient:type_name -> patient.v1.Patient
	16, // 4: patient.v1.UpdateRequest.patient:type_name -> patient.v1.Patient
	26, // 5: patient.v1.UpdateRequest.update_mask:type_name -> google.protobuf.FieldMask
	16, // 6: patient.v1.UpdateResponse.patient:type_name -> patient.v1.Patient
	17, // 7: patient.v1.Patient.medical_details:type_name -> patient.v1.MedicalDetails
	18, // 8: patient.v1.MedicalDetails.pain_types:type_name -> patient.v1.PainTypes
	19, // 9: patient.v1.MedicalDetails.sickness_details:type_name -> patient.v1.Sickness
	20, // 10: patient.v1.MedicalDetails.emotional_state:type_name -> patient.v1.EmotionalState
	21, // 11: patient.v1.MedicalDetails.appetite:type_name -> patient.v1.AppetieChanges
	0,  // 12: patient.v1.MedicalDetails.risk:type_name -> patient.v1.Risk
	22, // 13: patient.v1.PainTypes.cramping:type_name -> patient.v1.PainTypes.Cramping
	23, // 14: patient.v1.PainTypes.throbbing:type_name -> patient.v1.PainTypes.Throbbing
	24, // 15: patient.v1.PainTypes.tightning:type_name -> patient.v1.PainTypes.Tightning
	25, // 16: patient.v1.PainTypes.stabbing:type_name -> patient.v1.PainTypes.Stabbing
	4,  // 17: patient.v1.EmotionalState.emotions:type_name -> patient.v1.EmotionalState.Emotions
	5,  // 18: patient.v1.AppetieChanges.appetite:type_name -> patient.v1.AppetieChanges.Appetite
	1,  // 19: patient.v1.PainTypes.Cramping.intensity:type_name -> patient.v1.PainTypes.Pain
	2,  // 20: patient.v1.PainTypes.Cramping.response:type_name -> patient.v1.PainTypes.Response
	3,  // 21: patient.v1.PainTypes.Cramping.normality:type_name -> patient.v1.PainTypes.Normality
	1,  // 22: patient.v1.PainTypes.Throbbing.intensity:type_name -> patient.v1.PainTypes.Pain
	2,  // 23: patient.v1.PainTypes.Throbbing.response:type_name -> patient.v1.PainTypes.Response
	3,  // 24: patient.v1.PainTypes.Throbbing.normality:type_name -> patient.v1.PainTypes.Normality
	1,  // 25: patient.v1.PainTypes.Tightning.intensity:type_name -> patient.v1.PainTypes.Pain
	2,  // 26: patient.v1.PainTypes.Tightning.response:type_name -> patient.v1.PainTypes.Response
	3,  // 27: patient.v1.PainTypes.Tightning.normality:type_name -> patient.v1.PainTypes.Normality
	1,  // 28: patient.v1.PainTypes.Stabbing.intensity:type_name -> patient.v1.PainTypes.Pain
	2,  // 29: patient.v1.PainTypes.Stabbing.response:type_name -> patient.v1.PainTypes.Response
	3,  // 30: patient.v1.PainTypes.Stabbing.normality:type_name -> patient.v1.PainTypes.Normality
	6,  // 31: patient.v1.PatientService.Create:input_type -> patient.v1.CreateRequest
	8,  // 32: patient.v1.PatientService.Query:input_type -> patient.v1.QueryRequest
	10, // 33: patient.v1.PatientService.Get:input_type -> patient.v1.GetRequest
	12, // 34: patient.v1.PatientService.Update:input_type -> patient.v1.UpdateRequest
	14, // 35: patient.v1.PatientService.Delete:input_type -> patient.v1.DeleteRequest
	7,  // 36: patient.v1.PatientService.Create:output_type -> patient.v1.CreateResponse
	9,  // 37: patient.v1.PatientService.Query:output_type -> patient.v1.QueryResponse
	11, // 38: patient.v1.PatientService.Get:output_type -> patient.v1.GetResponse
	13, // 39: patient.v1.PatientService.Update:output_type -> patient.v1.UpdateResponse
	15, // 40: patient.v1.PatientService.Delete:output_type -> patient.v1.DeleteResponse
	36, // [36:41] is the sub-list for method output_type
	31, // [31:36] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_patient_v1_patient_proto_init() }
func file_patient_v1_patient_proto_init() {
	if File_patient_v1_patient_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_patient_v1_patient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicalDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PainTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sickness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmotionalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppetieChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PainTypes_Cramping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PainTypes_Throbbing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PainTypes_Tightning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_patient_v1_patient_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PainTypes_Stabbing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_patient_v1_patient_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_patient_v1_patient_proto_goTypes,
		DependencyIndexes: file_patient_v1_patient_proto_depIdxs,
		EnumInfos:         file_patient_v1_patient_proto_enumTypes,
		MessageInfos:      file_patient_v1_patient_proto_msgTypes,
	}.Build()
	File_patient_v1_patient_proto = out.File
	file_patient_v1_patient_proto_rawDesc = nil
	file_patient_v1_patient_proto_goTypes = nil
	file_patient_v1_patient_proto_depIdxs = nil
}
