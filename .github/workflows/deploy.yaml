# Builds and publishes a container image to the Azure container registry,
# then deploys it as a Container App revision.

# Skip this (any) workflow:
#  [skip ci | ci skip | no ci | skip actions | actions skip]
# See https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs

name: Deploy Update

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # TRAFFIC_MODE: latest
  TRAFFIC_MODE: stable

jobs:
  # -----------------------------------------------------------------------
  # Validate changes
  # -----------------------------------------------------------------------
  validate:
    name: Validate
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Private repo access
        env:
          # use env vars to write unmasked secrets to .netrc file
          BUF_USER: ${{ secrets.BUF_USER }}
          BUF_TOKEN: ${{ secrets.BUF_PAT }}
          REPO_USER: ${{ secrets.REPO_USER }}
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          echo "
            machine github.com login $REPO_USER password $REPO_TOKEN
            machine buf.build login $BUF_USER password $BUF_PAT
          " >> ~/.netrc

      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      # - name: Unit tests
      #   run: |
      #     go env -w GOPRIVATE="github.com/${{ github.repository_owner }}/*"
      #     go mod download
      #     go test -tags jwx_es256k -v ./...

  # -----------------------------------------------------------------------
  # Deploy Container App
  # -----------------------------------------------------------------------
  deploy:
    name: Deploy
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    outputs:
      revisionSuffix: ${{ fromJSON(steps.version.outputs.result).revisionSuffix }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Increment version
        id: semver
        uses: paulhatch/semantic-version@v5.0.2

      - name: Generate version-dependent values
        id: version
        uses: actions/github-script@v6
        with:
          script: |
            const version = "${{ steps.semver.outputs.version_tag }}"
            return {
              imageName: `${{ vars.ACR_NAME }}.azurecr.io/${{ github.event.repository.name }}:${version}`,
              revisionSuffix: version.replace(/\./g, '-')
            }

      - name: Kustomize patches
        run: |
          cd ./.github/kustomize
          kustomize edit add patch --kind containerapp --patch '[
            {"op": "replace", "path": "/properties/configuration/secrets/0/value", "value": "${{ secrets.ACR_PASSWORD }}"},
            {"op": "replace", "path": "/properties/configuration/secrets/1/value", "value": "${{ secrets.MONGO_URI }}"},
            {"op": "replace", "path": "/properties/configuration/secrets/2/value", "value": "${{ secrets.KV_CLIENT_SECRET }}"},
            {"op": "replace", "path": "/properties/configuration/secrets/3/value", "value": "${{ secrets.HMAC_SECRET }}"},
            {"op": "replace", "path": "/properties/template/containers/0/image", "value": "${{ fromJSON(steps.version.outputs.result).imageName }}"},
            {"op": "replace", "path": "/properties/template/revisionSuffix", "value": "${{ fromJSON(steps.version.outputs.result).revisionSuffix }}"}
          ]'

      - name: Kustomize build
        run: |
          kustomize build ./.github/kustomize | yq 'del(.metadata)' - > .github/kustomize/kustomized.yaml

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Docker private repo access
        env:
          BUF_USER: ${{ secrets.BUF_USER }}
          BUF_TOKEN: ${{ secrets.BUF_PAT }}
          REPO_USER: ${{ secrets.REPO_USER }}
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          echo "
            machine github.com login $REPO_USER password $REPO_TOKEN
            machine buf.build login $BUF_USER password $BUF_PAT
          " >> .netrc

      - name: Deploy
        uses: azure/container-apps-deploy-action@v0
        with:
          containerAppName: ca-${{ github.event.repository.name }}
          resourceGroup: ${{ vars.RESOURCE_GROUP }}
          appSourcePath: ${{ github.workspace }}
          acrName: ${{ vars.ACR_NAME }}
          imageToBuild: ${{ fromJSON(steps.version.outputs.result).imageName }}
          imageToDeploy: ${{ fromJSON(steps.version.outputs.result).imageName }}
          yamlConfigPath: .github/kustomize/kustomized.yaml

      - name: Create GitHub release
        uses: actions/github-script@v6
        with:
          retries: 2
          retry-exempt-status-codes: 401, 403, 404, 422
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ steps.semver.outputs.version_tag }}"
            })

  # -----------------------------------------------------------------------
  # Manage traffic routing
  # -----------------------------------------------------------------------
  route:
    name: Route
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Install Azure CLI extensions
        run: az config set extension.use_dynamic_install=yes_without_prompt

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # TRAFFIC_MODE == 'latest': send live traffic to latest revision 
      - name: Forward traffic to latest revision
        if: ${{ env.TRAFFIC_MODE == 'latest' }}
        run: |
          az containerapp ingress traffic set \
              --name ca-${{ github.event.repository.name }} \
              --resource-group ${{ vars.RESOURCE_GROUP }}  \
              --revision-weight latest=100

      # TRAFFIC_MODE == 'stable': send live traffic to stable revision
      - name: Forward traffic to stable revision
        if: ${{ env.TRAFFIC_MODE == 'stable' }}
        run: |
          latestRevision=$(az containerapp ingress traffic show \
            --name ca-${{ github.event.repository.name }} \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --query '[?latestRevision == `true`].weight | @[0]')

          if [ $latestRevision -eq 100 ]; then
            az containerapp ingress traffic set \
                --name ca-${{ github.event.repository.name }} \
                --resource-group ${{ vars.RESOURCE_GROUP }}  \
                --revision-weight latest=0 ca-${{ github.event.repository.name }}--${{ needs.deploy.outputs.revisionSuffix }}=100
          fi

      # set 'staging' to the latest revision
      - name: Set latest revision as staging
        run: |
          az containerapp revision label add \
              --name ca-${{ github.event.repository.name }} \
              --resource-group ${{ vars.RESOURCE_GROUP }}  \
              --label staging \
              --revision ca-${{ github.event.repository.name }}--${{ needs.deploy.outputs.revisionSuffix }} \
              --no-prompt

      # deactivate revisions with zero traffic â€” except latest
      - name: Deactivate unused revisions
        run: |
          revisions=$(az containerapp revision list \
            --name ca-${{ github.event.repository.name }} \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --query '[:-1] | @[?properties.trafficWeight == `0`].name')

          for revName in  $(echo $revisions | jq -r '.[]'); do
            az containerapp revision deactivate \
              --revision $revName \
              --name ca-${{ github.event.repository.name }} \
              --resource-group ${{ vars.RESOURCE_GROUP }}
          done
